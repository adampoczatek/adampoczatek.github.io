require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"modules/modal.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Modal = (function () {
    function Modal(modal, modalClose, triggers) {
        _classCallCheck(this, Modal);

        this.MODAL_VISIBLE = "modal--visible";
        this.PAGE_MODAL_VISIBLE = "modal--active";
        this.modal = modal;
        this.modalClose = modalClose;
        this.triggers = triggers;
        this.page = document.body;

        this.init();
    }

    Modal.prototype.open = function open() {
        this.modal.classList.add(this.MODAL_VISIBLE);
        this.page.classList.add(this.PAGE_MODAL_VISIBLE);
    };

    Modal.prototype.close = function close() {
        this.modal.classList.remove(this.MODAL_VISIBLE);
        this.page.classList.remove(this.PAGE_MODAL_VISIBLE);
    };

    Modal.prototype.init = function init() {
        var self = this;

        this.modalClose.addEventListener("click", function (e) {
            e.preventDefault();

            self.close();
        }, false);

        [].forEach.call(this.triggers, function (trigger) {
            trigger.addEventListener("click", function (e) {
                e.preventDefault();

                self.open();
            });
        });
    };

    return Modal;
})();

exports.Modal = Modal;

},{}]},{},["modules/modal.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJtb2R1bGVzL21vZGFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0lDQWEsS0FBSztBQUNGLGFBREgsS0FBSyxDQUNELEtBQUssRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFOzhCQURqQyxLQUFLOztBQUVWLFlBQUksQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7QUFDdEMsWUFBSSxDQUFDLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztBQUMxQyxZQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNuQixZQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM3QixZQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUN6QixZQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7O0FBRTFCLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmOztBQVZRLFNBQUssV0FZZCxJQUFJLEdBQUMsZ0JBQUc7QUFDSixZQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdDLFlBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUNwRDs7QUFmUSxTQUFLLFdBaUJkLEtBQUssR0FBQyxpQkFBRztBQUNMLFlBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEQsWUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0tBQ3ZEOztBQXBCUSxTQUFLLFdBc0JkLElBQUksR0FBQyxnQkFBRztBQUNKLFlBQUksSUFBSSxHQUFHLElBQUksQ0FBQzs7QUFFaEIsWUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUU7QUFDbkQsYUFBQyxDQUFDLGNBQWMsRUFBRSxDQUFDOztBQUVuQixnQkFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBRVYsVUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLE9BQU8sRUFBSztBQUN4QyxtQkFBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRTtBQUMzQyxpQkFBQyxDQUFDLGNBQWMsRUFBRSxDQUFDOztBQUVuQixvQkFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2YsQ0FBQyxDQUFDO1NBQ04sQ0FBQyxDQUFDO0tBQ047O1dBdENRLEtBQUsiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0IGNsYXNzIE1vZGFsIHtcbiAgICBjb25zdHJ1Y3RvciAobW9kYWwsIG1vZGFsQ2xvc2UsIHRyaWdnZXJzKSB7XG4gICAgICAgIHRoaXMuTU9EQUxfVklTSUJMRSA9IFwibW9kYWwtLXZpc2libGVcIjtcbiAgICAgICAgdGhpcy5QQUdFX01PREFMX1ZJU0lCTEUgPSBcIm1vZGFsLS1hY3RpdmVcIjtcbiAgICAgICAgdGhpcy5tb2RhbCA9IG1vZGFsO1xuICAgICAgICB0aGlzLm1vZGFsQ2xvc2UgPSBtb2RhbENsb3NlO1xuICAgICAgICB0aGlzLnRyaWdnZXJzID0gdHJpZ2dlcnM7XG4gICAgICAgIHRoaXMucGFnZSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuXG4gICAgb3BlbiAoKSB7XG4gICAgICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LmFkZCh0aGlzLk1PREFMX1ZJU0lCTEUpO1xuICAgICAgICB0aGlzLnBhZ2UuY2xhc3NMaXN0LmFkZCh0aGlzLlBBR0VfTU9EQUxfVklTSUJMRSk7XG4gICAgfVxuXG4gICAgY2xvc2UgKCkge1xuICAgICAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5NT0RBTF9WSVNJQkxFKTtcbiAgICAgICAgdGhpcy5wYWdlLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5QQUdFX01PREFMX1ZJU0lCTEUpO1xuICAgIH1cblxuICAgIGluaXQgKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5tb2RhbENsb3NlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy50cmlnZ2VycywgKHRyaWdnZXIpID0+IHtcbiAgICAgICAgICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5vcGVuKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSAiXX0=

require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"modules/navigation.js":[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.setupNav = setupNav;

function setupNav() {
    // Navigation
    var NAV_OPENED_CLASS = "site-header__menu--expanded";
    var NAV_TRIGGER_OPENED_CLASS = "mobile-menu-trigger--opened";
    var CONTENT_OPENED_CLASS = "main-content--opened";

    var nav = document.getElementById("nav"),
        navTrigger = document.getElementById("nav-trigger"),
        contentWrapper = document.getElementById("content"),
        opened = false;

    navTrigger.addEventListener("click", toggleMenu, false);

    function toggleMenu() {
        _updateClasses(opened);

        opened = !opened;
    }

    function _updateClasses(opened) {
        var method = opened ? "remove" : "add";

        nav.classList[method](NAV_OPENED_CLASS);
        navTrigger.classList[method](NAV_TRIGGER_OPENED_CLASS);
        contentWrapper.classList[method](CONTENT_OPENED_CLASS);
    }
}

},{}]},{},["modules/navigation.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJtb2R1bGVzL25hdmlnYXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQ0FPLFNBQVMsUUFBUSxHQUFJOztBQUV4QixRQUFNLGdCQUFnQixHQUFHLDZCQUE2QixDQUFDO0FBQ3ZELFFBQU0sd0JBQXdCLEdBQUcsNkJBQTZCLENBQUM7QUFDL0QsUUFBTSxvQkFBb0IsR0FBRyxzQkFBc0IsQ0FBQzs7QUFFcEQsUUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDcEMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1FBQ25ELGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsS0FBSyxDQUFDOztBQUVuQixjQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQzs7QUFFeEQsYUFBUyxVQUFVLEdBQUk7QUFDbkIsc0JBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdkIsY0FBTSxHQUFHLENBQUMsTUFBTSxDQUFDO0tBQ3BCOztBQUVELGFBQVMsY0FBYyxDQUFFLE1BQU0sRUFBRTtBQUM3QixZQUFJLE1BQU0sR0FBRyxNQUFNLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQzs7QUFFdkMsV0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3hDLGtCQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkQsc0JBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQztLQUMxRDtDQUNKIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydCBmdW5jdGlvbiBzZXR1cE5hdiAoKSB7XG4gICAgLy8gTmF2aWdhdGlvblxuICAgIGNvbnN0IE5BVl9PUEVORURfQ0xBU1MgPSBcInNpdGUtaGVhZGVyX19tZW51LS1leHBhbmRlZFwiO1xuICAgIGNvbnN0IE5BVl9UUklHR0VSX09QRU5FRF9DTEFTUyA9IFwibW9iaWxlLW1lbnUtdHJpZ2dlci0tb3BlbmVkXCI7XG4gICAgY29uc3QgQ09OVEVOVF9PUEVORURfQ0xBU1MgPSBcIm1haW4tY29udGVudC0tb3BlbmVkXCI7XG5cbiAgICB2YXIgbmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYXZcIiksXG4gICAgICAgIG5hdlRyaWdnZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hdi10cmlnZ2VyXCIpLFxuICAgICAgICBjb250ZW50V3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudFwiKSxcbiAgICAgICAgb3BlbmVkID0gZmFsc2U7XG5cbiAgICBuYXZUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0b2dnbGVNZW51LCBmYWxzZSk7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVNZW51ICgpIHtcbiAgICAgICAgX3VwZGF0ZUNsYXNzZXMob3BlbmVkKTtcblxuICAgICAgICBvcGVuZWQgPSAhb3BlbmVkO1xuICAgIH0gXG5cbiAgICBmdW5jdGlvbiBfdXBkYXRlQ2xhc3NlcyAob3BlbmVkKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBvcGVuZWQgPyBcInJlbW92ZVwiIDogXCJhZGRcIjtcblxuICAgICAgICBuYXYuY2xhc3NMaXN0W21ldGhvZF0oTkFWX09QRU5FRF9DTEFTUyk7XG4gICAgICAgIG5hdlRyaWdnZXIuY2xhc3NMaXN0W21ldGhvZF0oTkFWX1RSSUdHRVJfT1BFTkVEX0NMQVNTKTtcbiAgICAgICAgY29udGVudFdyYXBwZXIuY2xhc3NMaXN0W21ldGhvZF0oQ09OVEVOVF9PUEVORURfQ0xBU1MpO1xuICAgIH1cbn0iXX0=

//# sourceMappingURL=data:application/json;base64,